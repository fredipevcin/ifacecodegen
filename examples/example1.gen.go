// Code generated by ifacecodegen tool. DO NOT EDIT.
// Source: examples/interface.go

package examples

import (
	"context"

	opentracing "github.com/opentracing/opentracing-go"
	tracinglog "github.com/opentracing/opentracing-go/log"
)

// NewTracingFactory creates a new trace wrapper instance
func NewTracingFoo(s Foo, tracer *opentracing.Tracer) Foo {
	return &tracingFoo{
		s:      s,
		tracer: tracer,
	}
}

// TracingFactory is a mock of Factory interface
type tracingFoo struct {
	s      Foo
	tracer opentracing.Tracer
}

func (t *tracingFoo) Load(_param1 context.Context) (_result1 Entity, _result2 error) {
	span := opentracing.SpanFromContext(_param1)
	if span != nil {
		span = t.tracer.StartSpan("service.account.load", opentracing.ChildOf(span.Context()))
		defer func(span opentracing.Span) {
			if _result2 != nil {
				ext.Error.Set(span, true)
				span.LogFields(tracinglog.Error(_result2))
			}
			span.Finish()
		}(span)
	}
	return t.s.Load(_param1)
}

func (t *tracingFoo) Save(_param1 []Entity) (_result1 error) {
	return t.s.Save(_param1)
}

func (t *tracingFoo) IsValid() (_result1 bool) {
	return t.s.IsValid()
}

func (t *tracingFoo) ValidateMulti(_param1 ...Entity) {
	t.s.ValidateMulti(_param1...)
}

func (t *tracingFoo) Multi(p1 string, p2 string) (r1 string, r2 string) {
	return t.s.Multi(p1, p2)
}
